scalar Date

type Query {
conversion: [Conversion]
currency: [Currency]
statistics: [ConversionWithStatistics]
}

type Mutation {
calculateValue(firstCurrency: String!, secondCurrency: String!, amount: Int!): Float!
}

type Conversion {
id: ID!
firstCurrency: String,
secondCurrency: String,
firstValue: Long,
secondValue: Long,
firstRate: Float,
secondRate: Float,
date: Date
}

type ConversionWithStatistics {
firstCurrency: String,
secondCurrency: String,
avgRage: Float,
volume: Long
}

type Currency {
id: ID!
numCode: String,
charCode: String,
nominal: Int,
name: String
}

type CurrencyRate {
id: ID!
charCode: String,
rate: Float,
date: Date
}